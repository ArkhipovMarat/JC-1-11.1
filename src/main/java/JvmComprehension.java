// загружаются все классы среды выполнения в кучу (...Object, Integer)
// главный класс JvmComprehension также отдается для загрузки в систему загрузчиков классов (ClassLoader),
// в metaspace записывается мета-информация о классе
// jvm вызывает вызывает статический метод класса JvmComprehension - public static void main(String[] args)

public class JvmComprehension {

    public static void main(String[] args) { // для этого метода выделяется стековая память (создается фрейм)


        int i = 1;                      // 1 - примитивное значение i типа int будет хранится в стеке (в соответсвующем фрейме)

        Object o = new Object();        // 2 - ссылочная переменная "о" будет создана также в памяти стека,
                                        // и будет хранить ссылку, указывающую на объект, расположенный в куче

        Integer ii = 2;                 // 3 - ссылочная переменная "ii" будет создана также в памяти стека,
                                        // и будет хранить ссылку, указывающую на объект, расположенный в куче

        printAll(o, i, ii);             // 4 - на вершине стека создается новый блок памяти (фрейм) для метода printAll


        System.out.println("finished"); // 7 - результат "finished" сохранится в куче в пуле строк и будет удален из памяти,
                                        // при последующей работе сборщиком мусора
    }

    private static void printAll(Object o, int i, Integer ii) { // в стеке  будут созданы переменные "о","ii"
                                                                // с новыми ссылками на объекты, созданные ранее
                                                                // значение переменной i запишется в стек

        Integer uselessVar = 700;                   // 5 - - ссылочная переменная "uselessVar" будет создана также в памяти стека,
                                                    // и будет хранить ссылку, указывающую на объект, расположенный в куче

        System.out.println(o.toString() + i + ii);  // 6 - результат (o.toString() + i + ii) сохранится в куче, в пуле строк,
                                                    // но на этот объект, не будут укзывать ни одна ссылка,
                                                    // поэтому при последующей работе сборщик мусора удалит этот объект из памяти

    }
}
